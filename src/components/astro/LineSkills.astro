---
const { targetID } = Astro.props;
const lineId = `Line-Skills-${targetID || Math.random().toString(36).substring(2, 15)}`;
---

<div
	id={lineId}
	class="absolute bg-white origin-left h-2"
	data-target={targetID}
>
</div>

<script define:vars={{ lineId }}>
	const line = document.getElementById(lineId);
	const anchor = document.getElementById("icon-skills");
	const targetID = line.dataset.target;

	const target = document.getElementById(targetID);

	console.log(target);
	function updateLine() {
		const anchorRect = anchor?.getBoundingClientRect();
		const targetRect = target.getBoundingClientRect();

		if (!anchorRect || !targetRect) return;

		// Get center positions relative to viewport + scroll
		const anchorCenterX =
			anchorRect.left + anchorRect.width / 2 + window.scrollX;
		const anchorCenterY =
			anchorRect.top + anchorRect.height / 2 + window.scrollY;
		const targetCenterX =
			targetRect.left + targetRect.width / 2 + window.scrollX;
		const targetCenterY =
			targetRect.top + targetRect.height / 2 + window.scrollY;

		// Calculate distance and angle
		const dx = targetCenterX - anchorCenterX;
		const dy = targetCenterY - anchorCenterY;
		const distance = Math.sqrt(dx * dx + dy * dy);
		const angle = Math.atan2(dy, dx) * (180 / Math.PI);

		// Position the line at the anchor center
		line.style.left = `${anchorCenterX}px`;
		line.style.top = `${anchorCenterY / 5}px`;

		// Apply rotation + width
		line.style.width = `${distance}px`;
		line.style.transform = `rotate(${angle}deg)`;
		line.style.transformOrigin = "0 50%";
	}

	// Run once at load
	updateLine();

	// Update on resize
	window.addEventListener("resize", updateLine);
</script>
