CSS
.fullSection {
    height: 100vh;
    width: 100%;
    position: relative;
    overflow: hidden;
    background-color: #1a1a1a;
    color: white;
  }
  
  .skillsSection {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
  }
  
  .skillsContainer {
    position: absolute;
    inset: 0;
    display: flex;
    justify-content: center;
    align-items: center;
  }
  
  .skillBubble {
    position: absolute;
    border-radius: 50%;
    padding: 1rem;
    cursor: pointer;
    color: black;
    font-weight: bold;
    display: flex;
    justify-content: center;
    align-items: center;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    transition: box-shadow 0.3s ease;
  }
  
  .skillBubble:hover {
    box-shadow: 0 6px 8px rgba(0, 0, 0, 0.2);
  }
  
  .content {
    position: relative;
    z-index: 10;
    text-align: center;
    padding: 1rem;
  }
  
  .title {
    font-size: 2.5rem;
    font-weight: bold;
    margin-bottom: 1rem;
  }
  
  .description {
    font-size: 1.25rem;
    margin-bottom: 1.5rem;
  }
  
  .button {
    background-color: #3498db;
    color: white;
    border: none;
    padding: 0.75rem 1.5rem;
    font-size: 1rem;
    font-weight: bold;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }
  
  .button:hover {
    background-color: #2980b9;
  }

"use client"
import React, { useEffect, useRef, useState } from 'react';
import anime from 'animejs';
import styles from './Section2.module.css';

const skills = [
  { name: 'React', color: '#61DAFB' },
  { name: 'Next.js', color: '#000000' },
  { name: 'JavaScript', color: '#F7DF1E' },
  { name: 'CSS', color: '#264DE4' },
  { name: 'Node.js', color: '#339933' },
  { name: 'Git', color: '#F05032' },
];

export default function Section2() {
  const [isVisible, setIsVisible] = useState(false);
  const sectionRef = useRef(null);
  const animationRef = useRef(null);

  useEffect(() => {
    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          setIsVisible(true);
          observer.unobserve(entry.target);
        }
      },
      { threshold: 0.1 } // Start animation when 10% of the section is visible
    );

    if (sectionRef.current) {
      observer.observe(sectionRef.current);
    }

    return () => {
      if (sectionRef.current) {
        observer.unobserve(sectionRef.current);
      }
    };
  }, []);

  useEffect(() => {
    if (isVisible) {
      animationRef.current = anime({
        targets: '.skill-bubble',
        translateX: () => anime.random(-250, 250),
        translateY: () => anime.random(-250, 250),
        scale: () => anime.random(0.5, 2),
        easing: 'easeInOutQuad',
        duration: 4000,
        delay: anime.stagger(200),
        loop: true,
        direction: 'alternate',
      });
    }

    return () => {
      if (animationRef.current) animationRef.current.pause();
    };
  }, [isVisible]);

  const handleMouseEnter = (index) => {
    anime({
      targets: `.skill-bubble:nth-child(${index + 1})`,
      scale: 1.5,
      duration: 800,
      easing: 'easeOutElastic(1, .5)',
    });
  };

  const handleMouseLeave = (index) => {
    anime({
      targets: `.skill-bubble:nth-child(${index + 1})`,
      scale: 1,
      duration: 500,
      easing: 'easeInElastic(1, .5)',
    });
  };

  return (
    <section ref={sectionRef} className={`${styles.fullSection} ${styles.skillsSection}`}>
      <div className={styles.skillsContainer}>
        {skills.map((skill, index) => (
          <div
            key={skill.name}
            className={`${styles.skillBubble} skill-bubble`}
            style={{ 
              backgroundColor: skill.color,
              opacity: isVisible ? 1 : 0,
              transition: 'opacity 0.5s ease-in-out'
            }}
            onMouseEnter={() => handleMouseEnter(index)}
            onMouseLeave={() => handleMouseLeave(index)}
          >
            {skill.name}
          </div>
        ))}
      </div>
      <div className={styles.content}>
        <h2 className={styles.title}>My Skills Universe</h2>
        <p className={styles.description}>Hover over the bubbles to explore my skills!</p>
        <button 
          className={styles.button}
          onClick={() => animationRef.current.restart()}
        >
          Restart Animation
        </button>
      </div>
    </section>
  );
}